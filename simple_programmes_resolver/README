Resolve a crid

http://services.notu.be/resolver

See Project Baird (spec: 
http://projectbaird.com/specs/draft-mcroberts-uri-resolver.html) for an 
explanation. It currently works only for BBC content, and in some cases 
only for the West regional variations. It's not yet complete with 
respect to the specification. You can find crids from newer versions of 
MythTV (programid in the program table). They are not the same as the 
crids in the BBC backstage data

Example queries using curl are below.

Limitations

    * Only today's data is available
    * Duration is not implemented
    * BBC-related channels only
    * Regional variations are for the West
    * There are probably a bunch of bugs

Examples using Curl

Crids

If a url that's a crid is present, just go ahead and look up that, 
resolve to /programmes version.

curl "http://services.notu.be/resolve?uri\[\]=crid://fp.bbc.co.uk/5a6s49&fmt=rdf"

if you don't set the format using the accept header or fmt=rdf it 
resolves to the html version of the page, which itself is then resolved 
by the /programmes site to the Episode (rather than the Version) - you 
could equally use:

curl -H 'Accept: application/rdf+xml'

The same but following the redirect

curl -L "http://services.notu.be/resolve?uri\[\]=crid://fp.bbc.co.uk/5a6s49&fmt=rdf"

Result: 301, http://www.bbc.co.uk/programmes/b00tk8lm#programme

Dvb urls

If there's no crid, if there's a dvb url in the query, look up that, 
resolve to programmes

These follow the format: 
dvb://<original_network_id>.<transport_stream_id>.<service_id>;event_id~start-time--duration

curl "http://services.notu.be/resolve?uri\[\]=dvb://233a.1041.1041;cde9~20100825T233500Z--PT00H05M00S&fmt=rdf"

Result: 301, http://www.bbc.co.uk/programmes/b00tk8lm#programme

Host and start time

If there's no dvb url and if the host header is present and matches the 
TVDNS format, and start is available as a parameter, resolve to 
programmes

curl -H "Host: 3098.1041.1041.233a.dvb.tvdns.net" "http://services.notu.be/resolve?start=2010-08-26T19:00:00Z"

Similarly, a transmisisonTime can be set, including defauling to now:

curl -H "Host: 3098.1041.1041.233a.dvb.tvdns.net" "http://services.notu.be/resolve?transmissionTime="

Eventid and Serviceid

If crid, dvb urls and start are not available, but eventid and serviceid 
are both present as parameters, resolve to programmes

curl "http://services.notu.be/resolve?serviceid=1041&eventid=cde9"

Result: 301, http://www.bbc.co.uk/programmes/b00tk8lm#programme
No Redirect

If you don't want it to redirect use noredirect=true as a parameter:

curl "http://services.notu.be/resolve?uri\[\]=crid://fp.bbc.co.uk/5a6s49&noredirect=true"

Programmes and Pips

These do not resolve, but just return the crid and dvb urls if 
available. Note that both versions and episodes will resolve.

Example of a working version programmes url

curl "http://services.notu.be/resolve?uri\[\]=http://www.bbc.co.uk/programmes/b00tk8lm#programme"

Example of a working programme Episode url

curl "http://services.notu.be/resolve?uri\[\]=http://www.bbc.co.uk/programmes/b00tk8my#programme"

Example of a tag url

curl "http://services.notu.be/resolve?uri\[\]=tag:feeds.bbc.co.uk,2008:PIPS:b00tk8lm"

The setup I have is the following:

* one machine that runs mythtv
* a different machine on the public internet running a crawler of 
/programmes and a mini ruby server with mysql


The process is this:

1. A crontab on the Myth machine that exports crid, title, start time, 
channel and channel number for all BBC content, and uploads it to the 
other machine:

crid://fp.bbc.co.uk/240z2y| |2011-10-26T10:00:00+00:00|2011-10-26T11:00:00+00:00||BBC ONE|Homes Under the Hammer|1|

20 5 * * * cd myth_data; ruby dump_today.rb; scp 
data/latest_data.txt tvdata@ec2-79-125-58-203.eu-west-1.compute.amazonaws.com:latest_data.txt;


2. A later crontab on the server that deletes the old data, loads the 
myth data into a database and initiates the /programmes crawler, 
inserting the data in the same database for all BBC content:

25 6 * * * cd tvdata; mysql -u user -ppass epgs < insertdata.sql
30 6 * * * cd crawler; ruby crawler.rb

3. A little server that joins up the two datasets. You can run it like this:

mkdir WEBrickLog
ruby server.rb &



